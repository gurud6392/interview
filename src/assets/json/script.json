[
  {
    "id": "1",
    "title": "Difference between let & var ?",
    "render": [
      {
        "ulist":[
          "`let` gives you the privilege to declare variables that are limited in scope to the **block**, statement of expression unlike `var`.",
          "`var` is rather a keyword which defines a variable globally regardless of *block* scope."   
        ],
        "subtitle": ["Global window object", 3],
        "paragraph": "Even if the `let` variable is defined as same as `var` variable globally, the `let` variable will not be added to the global window object.",
        "code":"bd46def42b9675c5dd80be33c4dbe72c"
      },
      {
        "paragraph": "Thus `let` variables cannot be accessed in the window object because they cannot be globally accessed."
      },
      {
        "subtitle": ["Block", 3],
        "paragraph": "`let` variables are usually used when there is a limited use of those variables. Say, in for loops, while loops or inside the scope of if conditions etc. <br/>Basically, where ever the scope of the variable has to be limited.",
        "code": "40c841cce0f4b7c8fdc8590714d0b736"
      },
      {
        "subtitle": ["Redeclaration", 3],
        "paragraph": "`let` variables cannot be re-declared while `var` variable can be re-declared in the same scope.",
        "code": "b4d823bcfd2ec176d5efbf17f578ddce"
      },
      {
        "subtitle": ["Function", 3],
        "paragraph": "*let* and *var* variables work the same way when used in a function block."
      }
    ]
  },
  {
    "id": "2",
    "title": "Pure components in react ?",
    "render": [
      {
        "paragraph": "*`React.PureComponent`* is exactly the same as *`React.Component`* except that it handles the `shouldComponentUpdate()` method for you. When props or state changes, *PureComponent* will do a shallow comparison on both props and state. *Component* on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever `shouldComponentUpdate` is called."
      },
      {
        "paragraph": "React Components re-renders in the following scenarios:",
        "ulist": [
          "“setState” is called in Component",
          "“props” values are updated",
          "this.forceUpdate() is called"
        ]
      },
      {
        "paragraph": "In the case of Pure Components, the React components do not re-render blindly without considering the updated values of React “props” and “state”. If updated values are the same as previous values, render is not triggered.",
        "code": "450e5feb767a5fc476c08d2615437fd3"
      },
      {
        "paragraph": "We can convert component to pure component as below:",
        "ulist":[
          "For class components react provides `React.PureComponent` base class.",
          "For Functional component react provides `React.memo` HOC (Higher Order Component)."
        ]
      },
      {
        "subtitle": [" React.PureComponent ", 3],
        "paragraph": "When a class component extends `React.PureComponent` base class then React treated the component as Pure component. The major difference between `React.Component` class and `React.PureComponent` is the implementation of `shouldComponentUpdate()`. In `React.Component` `shouldComponentUpdate()` will always returns true on the other hand in `React.PureComponent` it will compare the current state and props with new state and props.<br/>As `React.PureComponent` implements `shouldComponentUpdate()` method for Pure component which will improve performance and optimize rendering. But the point here is that it is only doing the shallow comparison so if you have very complex nested object then it may give you false result."
      },
      {
        "subtitle": [" React.memo ", 3],
        "paragraph": "`React.memo` is nothing but a Higher Order function (HOC). `React.memo` is similar to `React.PureComponent` and it is for functional component instead of class component. You can wrap your functional component when component renders same output with same props passed. Due to this it will improve the performance and optimize the rendering.<br/>`React.memo` only works when props of components changes. It means that if you are using state using useState hook in functional then for every state change it will render the component. Similar to React.PureComponent it is doing shallow comparison of props. "
      }
    ]
  },
  {
    "id": "3",
    "title": "Controlled & Uncontrolled components ?",
    "render": [
      {
        "ulist":[
          "A Controlled Component is one that takes its current value through props and notifies changes through callbacks like onChange. A parent component *controls* it by handling the callback and managing its own state and passing the new values as props to the controlled component. You could also call this a *dumb component*.",
          "A Uncontrolled Component is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML."   
        ]
      },
      {
        "paragraph": "Most native React form components support both controlled and uncontrolled usage:",
        "code": "4a2dc4e9330d3ee6ca0f2798caa5a39e"
      }
    ]
  },
  {
    "id": "4",
    "title": "What are the major features of React ?",
    "render": [
      {
        "paragraph": "The major features of React are:",
        "ulist": [
          "It uses **VirtualDOM** instead RealDOM considering that RealDOM manipulations are expensive.",
          "Supports **server-side** rendering.",
          "Follows **Unidirectional** data flow or data binding.",
          "Uses **reusable/composable** UI components to develop the view."
        ]
      },
      {
        "subtitle": ["Real DOM", 3],
        "paragraph": "First things first, DOM stands for “Document Object Model”. The DOM in simple words represents the UI of your application. Everytime there is a change in the state of your application UI, the DOM gets updated to represent that change. Now the catch is frequently manipulating the DOM affects performance, making it slow."
      },
      {
        "subtitle": ["What makes DOM manipulation slow?", 5],
        "paragraph": "The DOM is represented as a tree data structure. Because of that, the changes and updates to the DOM are fast. But after the change, the updated element and it’s children have to be re-rendered to update the application UI. The re-rendering or re-painting of the UI is what makes it slow. Therefore, the more UI components you have, the more expensive the DOM updates could be, since they would need to be re-rendered for every DOM update."
      },
      {
        "subtitle": ["Virtual DOM", 3],
        "paragraph": "When new elements are added to the UI, a virtual DOM, which is represented as a tree is created. Each element is a node on this tree. If the state of any of these elements changes, a new virtual DOM tree is created. This tree is then compared or “diffed” with the previous virtual DOM tree.<br/>   Once this is done, the virtual DOM calculates the best possible method to make these changes to the real DOM. This ensures that there are minimal operations on the real DOM. Hence, reducing the performance cost of updating the real DOM."
      },
      {
        "subtitle": ["Unidirectional", 3],
        "paragraph": "In general this concept means that data has one, and only one, way to be transferred to other parts of the application.",
        "ulist": [         
          "state is passed to the view and to child components",
          "actions are triggered by the view",
          "actions can update the state",
          "the state change is passed to the view and to child components"
        ],
        "image": "4_0.png"
      }
    ]
  },
  {
    "id": "5",
    "title": "What is state in React?",
    "render": [
      {
        "paragraph": "State of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components. Let's create an user component with message state,",
        "code": "2c5de942430c759d45e9a6ec757f74ac"
      }
    ]
  },
  {
    "id": "6",
    "title": "What are props in React ?",
    "render": [
      {
        "paragraph": "Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component."
      },
      {
        "paragraph": "The primary purpose of props in React is to provide following component functionality :",
        "ulist": [
          "Pass custom data to your component.",
          "Trigger state changes.",
          "Use via `this.props.reactProp` inside component's `render()` method"
        ]
      }
    ]
  },
  {
    "id": "7",
    "title": "What is the use of refs ?",
    "render": [
      {
        "paragraph": "The *ref* is used to return a reference to the element. They *should be avoided* in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.",
        "ulist": [          
          "String refs (legacy method)",
          "Callback refs",
          "`React.createRef` (from *React 16.3*)",
          "The `useRef` Hook (from *React 16.8*)"
        ],
        "code": "584338ec5c6f9f7d23d0488303da33b1"
      }
    ]
  },
  {
    "id": "8",
    "title": "What is the purpose of using super constructor with props argument?",
    "render": [
      {
        "paragraph": "A child class constructor cannot make use of `this` reference until `super()` method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to `super()` call is to access `this.props` in your child constructors."
      },
      {
        "paragraph": "Passing props:",
        "code": "d635829e669b03ce878c5f5711326212"
      },
      {
        "paragraph": "The above code snippets reveals that `this.props` is different only within the constructor. It would be the same outside the constructor."
      }
    ]
  },
  {
    "id": "9",
    "title": "Closure in Javascript ?",
    "render": [
      {
        "paragraph": "A closure is a function that has access to its outer function scope even after the outer function has returned.",
        "code": "c36906a7764c80dfc0e8a02268ba2d0b"
      },
      {
        "paragraph": "We are storing the anonymous inner function returned by `getCounter` function into the `count` variable. As `count` function is now a *closure*, it can access the `counter` variable of `getCounter` function even after `getCounter()` has returned."
      }
    ]
  },
  {
    "id": "10",
    "title": "Generator functions ?",
    "render": [
      {
        "paragraph": "Function keyword followed by an asterisk is used to define a generator function, which returns a **Generator** object. <br/>We can exit and re-entered the generator function later on. In case of re-entrances, their context (variable bindings) will be saved. <br/>Important point to note here is that calling a generator function does not execute its body immediately, in fact it returns an iterator object for the function."
      },
      {
        "paragraph": "Regular functions return only one, single value (or nothing). <br/> Generators can return (“yield”) multiple values, one after another, on-demand. They work great with iterables, allowing to create data streams with ease.",
        "code": "23f86dc407da864ee82756901af4cd7e"
      },
      {
        "paragraph": "Generate body will get executed only when the iterator’s `next()` method is called. Execution take place until the first yield expression, which specifies the value to be returned from the iterator or, with `yield*`, delegates to another generator function. <br/>The `next()` method returns an object with a value property containing the yielded value and a `done` property which indicates whether the generator has yielded its last value, as a **Boolean**."
      }
    ]
  },
  {
    "id": "11",
    "title": "Promise ?",
    "render": [
      {
        "paragraph": "`A promise is an object that may produce a single value some time in the future:` either a resolved value, or a reason that it’s not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: **fulfilled**, **rejected**, or **pending**. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.<br/> Promise execution is asynchronous, which means that it's executed, but the program won't wait until it's finished to continue with the rest of the code.",
        "code": "a89e48aba56814947f3ed0aeed742389"
      },
      {
        "paragraph": "A promise can have 3 states which are the following:",
        "ulist": [
          "**Pending:** This is the initial state of the promise, the promise is now waiting for either to be resolved or rejected. For example, when are reaching out to the web with an AJAX request and wrapping the request in a promise. Then the promise will be pending in the time window in which the request is not returned.",
          "**Fulfilled:** When the operation is completed succesfully, the promise is fulfilled. For example, when we are reaching out to be web using AJAX for some JSON data and wrapping it in a promise. When we are succesfully getting data back the promise is said to be fulfilled.",
          "**Rejected:** When the operation has failed, the promise is rejected. For example, when we are reaching out to be web using AJAX for some JSON data and wrapping it in a promise. When we are getting a 404 error the promise has been rejected."
        ]
      },
      {
        "paragraph": "The *`then`* callback receives as a first argument the resolved value (the string 'success' in this case). <br/> The *`catch`* callback receives as a first argument the rejected value (the string 'Error' in this case). <br/> The *`finally`* method receives a callback which is executed on both promise fulfillment and rejection. Here we can write 'cleanup' code which need to be executed always regardless of promise outcome."
      }
    ]
  },
  {
    "id": "12",
    "title": "Clone Objects ?",
    "render": [
      {
        "code": "a383b9d004e00f0e164900bb0a693674"
      },
      {
        "subtitle": ["Lodash DeepClone vs JSON", 3],
        "ulist": [
          "**JSON.stringify/parse** only work with Number and String and Object literal without function or Symbol properties.",
          "**deepClone** work with all types, function and Symbol are copied by reference."
        ]
      }
    ]
  },
  {
    "id": "13",
    "title": "The const keyword",
    "render": [
      {
        "paragraph": "If a variable is defined using the `const` keyword, its scope is limited to the **block scope**. In addition the variable cannot be reassigned to a different value."
      },
      {
        "paragraph": "Note that it is important to understand that `const` does NOT mean that the value is fixed and immutable. This is a common misunderstanding amongst many Javascript developers, and they incorrectly mentioned that a value defined by the `const` keyword is immutable (i.e. it cannot be changed)."
      },
      {
        "paragraph": "In the following example we can show that the value of the variable defined within the `const` keyword is mutable, i.e. it can be changed.",
        "code": "2b78e5f33f3fe938d482dee2147158e3"
      }
    ]
  },
  {
    "id": "14",
    "title": "Transpilers ?",
    "render": [
      {
        "paragraph": "A source-to-source compiler, *transcompiler* or *transpiler* is a type of compiler that takes the source code of a program written in one programming language as its input and produces the equivalent source code in another programming language."
      },
      {
        "subtitle": ["List of ES6 Transpilers", 3],
        "ulist": [
          "**Babel**: To transpile ES6 into ES5 for static builds",
          "**Babelify**: To incorporate babel into your Gulp, Grunt, or npm run build process",
          "**Traceur compiler**: ES6 features > ES5. Includes classes, generators, promises, destructuring patterns, default parameters & more.",
          "**es6ify**: Traceur compiler wrapped as a Browserify v2 transform"
        ]
      }
    ]
  },
  {
    "id": "15",
    "title": "isArray() ?",
    "render": [
      {
        "paragraph": "The Array.isArray() method determines whether the passed value is an Array.",
        "code": "77dca4dabeba0f25f857a41f28d97847"
      }
    ]
  },
  {
    "id": "16",
    "title": "Higher Order Component ?",
    "render": [
      {
        "paragraph": "A higher-order component is a function that takes a component and returns a new component.<br/>.<br/>.<br/>."
      }
    ]
  },
  {
    "id": "17",
    "title": "Context API ?",
    "render": [
      {
        "paragraph": "**Context** provides a way to pass data through the component tree without having to pass props down manually at every level. <br/>React’s Context API is introduced to address issue of props drilling, where higher order component’s context can be accessed by child component without mapping props in intermediate components.",
        "code": "50ad38e2d93dc236b148fdd07b52f11e"
      }
    ]
  },
  {
    "id": "18",
    "title": "Difference b/w function somthing(){...} & const someting = () => {...} ?",
    "render": [
      {
        "code": "bcd5e18f46881287085b71aaffe16803"
      }
    ]
  },
  {
    "id": "19",
    "title": "Function Declaration & Function Expression ?",
    "render": [
      {
        "paragraph": "**Function declarations** load before any code is executed. <br/> **Function expressions** load only when the interpreter reaches that line of code.",
        "code": "f3723ee759360c131d4f1382909b819b"
      },
      {
        "paragraph": "So if you try to call a function expression before it's loaded, you'll get an error! If you call a function declaration instead, it'll always work, because no code can be called until all declarations are loaded.",
        "ulist": [
          "A *Function Declaration* defines a named function variable without requiring variable assignment. Function Declarations occur as standalone constructs and cannot be nested within non-function blocks.",
          "A *Function Expression* defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via Functions Expressions can be named or anonymous. Function Expressions must not start with “function”."
        ]
      }
    ]
  },
  {
    "id": "20",
    "title": "",
    "render": [
      {
        "paragraph": ""
      }
    ]
  },
  {
    "id": "",
    "title": "",
    "render": [
      {
        "paragraph": ""
      }
    ]
  },
  {
    "id": "",
    "title": "",
    "render": [
      {
        "paragraph": ""
      }
    ]
  },
  {
    "id": "",
    "title": "",
    "render": [
      {
        "paragraph": ""
      }
    ]
  },
  {
    "id": "",
    "title": "",
    "render": [
      {
        "paragraph": ""
      }
    ]
  }
]

