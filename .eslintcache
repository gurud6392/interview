[{"E:\\Work\\github\\shreyas\\react\\interview\\src\\reportWebVitals.ts":"1","E:\\Work\\github\\shreyas\\react\\interview\\src\\index.tsx":"2","E:\\Work\\github\\shreyas\\react\\interview\\src\\App.tsx":"3","E:\\Work\\github\\shreyas\\react\\interview\\src\\router\\index.tsx":"4","E:\\Work\\github\\shreyas\\react\\interview\\src\\components\\loader\\index.tsx":"5","E:\\Work\\github\\shreyas\\react\\interview\\src\\pages\\home\\index.tsx":"6","E:\\Work\\github\\shreyas\\react\\interview\\src\\pages\\layout\\index.tsx":"7","E:\\Work\\github\\shreyas\\react\\interview\\src\\store\\index.tsx":"8","E:\\Work\\github\\app\\interview\\src\\index.tsx":"9","E:\\Work\\github\\app\\interview\\src\\store\\index.tsx":"10","E:\\Work\\github\\app\\interview\\src\\pages\\home\\index.tsx":"11","E:\\Work\\github\\app\\interview\\src\\router\\index.tsx":"12","E:\\Work\\github\\app\\interview\\src\\pages\\layout\\index.tsx":"13","E:\\Work\\github\\app\\interview\\src\\App.tsx":"14","E:\\Work\\github\\app\\interview\\src\\components\\loader\\index.tsx":"15","E:\\Work\\github\\app\\interview\\src\\pages\\interview\\index.tsx":"16","E:\\Work\\github\\app\\interview\\src\\pages\\interview\\InterviewList.tsx":"17","E:\\Work\\github\\app\\interview\\src\\helpers\\ReplaceQuotes.ts":"18","E:\\Work\\github\\app\\interview\\src\\pages\\interview\\LoadImage.tsx":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":620,"mtime":1607063219149,"results":"22","hashOfConfig":"21"},{"size":340,"mtime":1607014505304,"results":"23","hashOfConfig":"21"},{"size":299,"mtime":1606572192148,"results":"24","hashOfConfig":"21"},{"size":152,"mtime":1606571547474,"results":"25","hashOfConfig":"21"},{"size":129,"mtime":1606572047128,"results":"26","hashOfConfig":"21"},{"size":1644,"mtime":1607066927069,"results":"27","hashOfConfig":"21"},{"size":509,"mtime":1607061720387,"results":"28","hashOfConfig":"21"},{"size":620,"mtime":1609934845116,"results":"29","hashOfConfig":"30"},{"size":509,"mtime":1607061720387,"results":"31","hashOfConfig":"30"},{"size":127,"mtime":1609421443752,"results":"32","hashOfConfig":"30"},{"size":543,"mtime":1609673300575,"results":"33","hashOfConfig":"30"},{"size":2140,"mtime":1610022733566,"results":"34","hashOfConfig":"30"},{"size":367,"mtime":1609936830455,"results":"35","hashOfConfig":"30"},{"size":294,"mtime":1609936604278,"results":"36","hashOfConfig":"30"},{"size":1432,"mtime":1609941289730,"results":"37","hashOfConfig":"30"},{"size":4827,"mtime":1609782006360,"results":"38","hashOfConfig":"30"},{"size":398,"mtime":1609651245168,"results":"39","hashOfConfig":"30"},{"size":263,"mtime":1609827150131,"results":"40","hashOfConfig":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zgdla5",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"e43bhx",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Work\\github\\shreyas\\react\\interview\\src\\reportWebVitals.ts",[],"E:\\Work\\github\\shreyas\\react\\interview\\src\\index.tsx",[],["83","84"],"E:\\Work\\github\\shreyas\\react\\interview\\src\\App.tsx",["85","86"],"E:\\Work\\github\\shreyas\\react\\interview\\src\\router\\index.tsx",[],"E:\\Work\\github\\shreyas\\react\\interview\\src\\components\\loader\\index.tsx",[],"E:\\Work\\github\\shreyas\\react\\interview\\src\\pages\\home\\index.tsx",[],"E:\\Work\\github\\shreyas\\react\\interview\\src\\pages\\layout\\index.tsx",[],"E:\\Work\\github\\shreyas\\react\\interview\\src\\store\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\index.tsx",[],["87","88"],"E:\\Work\\github\\app\\interview\\src\\store\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\pages\\home\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\router\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\pages\\layout\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\App.tsx",["89"],"E:\\Work\\github\\app\\interview\\src\\components\\loader\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\pages\\interview\\index.tsx",[],"E:\\Work\\github\\app\\interview\\src\\pages\\interview\\InterviewList.tsx",["90","91","92"],"import React, { useEffect, useState } from \"react\";\r\nimport Gist from \"react-gist\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport JSData from \"../../assets/json/script.json\";\r\nimport { IObject } from \"../../interface/IObject\";\r\nimport { Params } from \"../../interface/IInterviewList\";\r\nimport { Button, Col, Row, Typography } from \"antd\";\r\nimport Layout from \"antd/lib/layout/layout\";\r\nimport styles from \"./interview.module.scss\";\r\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\r\nimport { ReplaceQuotes } from \"../../helpers/ReplaceQuotes\";\r\nimport LoadImage from \"./LoadImage\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst InterviewList = () => {\r\n  const param = useParams<Params>();\r\n  const [oneData, setOneData] = useState<IObject>();\r\n  const [pagination, setPagination] = useState<IObject>({});\r\n\r\n  useEffect(() => {\r\n    let paramId = param.id;\r\n    let nextId = parseInt(param.id) + 1;\r\n    let prevId = parseInt(param.id).valueOf() - 1;\r\n\r\n    let filteredData = JSData.find((el) => el.id == paramId);\r\n    let prevData = JSData.find((el) => el.id == prevId.toString());\r\n    let nextData = JSData.find((el) => el.id == nextId.toString());\r\n    setPagination({ prev: prevData, next: nextData });\r\n    setOneData(filteredData);\r\n  }, [param.id]);\r\n\r\n  const getRenderedCode = () => {\r\n    return (\r\n      oneData &&\r\n      Object.keys(oneData).map((iData, i) => {\r\n        switch (iData) {\r\n          case \"title\":\r\n            return <Title key={i}>{oneData.id + \". \" + oneData[iData]}</Title>;\r\n          case \"paragraph\":\r\n            return (\r\n              <Text key={i}>\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: oneData[iData].replace(\r\n                      /`(.*?)`/g,\r\n                      \"<code>$1</code>\"\r\n                    ),\r\n                  }}\r\n                ></span>\r\n              </Text>\r\n            );\r\n          case \"code\":\r\n            return <Gist key={i} id={oneData[iData]} />;\r\n          case \"render\":\r\n            return oneData[iData].map((d: IObject) =>\r\n              Object.keys(d).map((rKey) => getRenderedElement(rKey, d[rKey]))\r\n            );\r\n          default:\r\n            return <></>;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const getRenderedElement = (key: string, value: any) => {\r\n    switch (key) {\r\n      case \"code\":\r\n        return <Gist id={value} />;\r\n      case \"paragraph\":\r\n        return (\r\n          <Text className={styles.interviewList__paragraph}>\r\n            <span\r\n              dangerouslySetInnerHTML={{ __html: ReplaceQuotes(value) }}\r\n            ></span>\r\n          </Text>\r\n        );\r\n      case \"subtitle\":\r\n        return <Title level={value[1]}>{value[0]}</Title>;\r\n      case \"ulist\":\r\n        return (\r\n          <ul>\r\n            {value.map((list: any, i: number) => (\r\n              <li key={i}>\r\n                <Text>\r\n                  <span\r\n                    dangerouslySetInnerHTML={{ __html: ReplaceQuotes(list) }}\r\n                  ></span>\r\n                </Text>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      case \"olist\":\r\n        return (\r\n          <ol>\r\n            {value.map((list: any, i: number) => (\r\n              <li key={i}>\r\n                <Text>\r\n                  <span\r\n                    dangerouslySetInnerHTML={{ __html: ReplaceQuotes(list) }}\r\n                  ></span>\r\n                </Text>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        );\r\n      case \"image\":\r\n        return (\r\n          <div className={styles.interviewList__imageDiv}>\r\n            <LoadImage value={value} />\r\n          </div>\r\n        )\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const replaceQuestion = (text: string) => {\r\n    return text.replace(\"?\", \"\");\r\n  };\r\n\r\n  return (\r\n    <Layout className={styles.interviewList}>\r\n      <div className={styles.interviewList__inner}>{getRenderedCode()}</div>\r\n      <Row justify=\"space-between\" className={styles.interviewList__nextPrevRow}>\r\n        <Col>\r\n          {pagination.prev ? (\r\n            <Link to={`/interview/js/${pagination.prev.id}`}>\r\n              <LeftOutlined /> {replaceQuestion(pagination.prev.title)}\r\n            </Link>\r\n          ) : (\r\n            <Button type=\"link\" disabled>\r\n              <LeftOutlined /> Previous\r\n            </Button>\r\n          )}\r\n        </Col>\r\n\r\n        <Col>\r\n          {pagination.next ? (\r\n            <Link to={`/interview/js/${pagination.next.id}`}>\r\n              {replaceQuestion(pagination.next.title)} <RightOutlined />\r\n            </Link>\r\n          ) : (\r\n            <Button type=\"link\" disabled>\r\n              Next <RightOutlined />\r\n            </Button>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Layout>\r\n  );\r\n};\r\nexport default InterviewList;\r\n","E:\\Work\\github\\app\\interview\\src\\helpers\\ReplaceQuotes.ts",[],["93","94"],"E:\\Work\\github\\app\\interview\\src\\pages\\interview\\LoadImage.tsx",["95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":35,"nodeType":"102","messageId":"103","endLine":2,"endColumn":40},{"ruleId":"100","severity":1,"message":"104","line":2,"column":42,"nodeType":"102","messageId":"103","endLine":2,"endColumn":48},{"ruleId":"96","replacedBy":"105"},{"ruleId":"98","replacedBy":"106"},{"ruleId":"100","severity":1,"message":"107","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":26,"column":50,"nodeType":"110","messageId":"111","endLine":26,"endColumn":52},{"ruleId":"108","severity":1,"message":"109","line":27,"column":46,"nodeType":"110","messageId":"111","endLine":27,"endColumn":48},{"ruleId":"108","severity":1,"message":"109","line":28,"column":46,"nodeType":"110","messageId":"111","endLine":28,"endColumn":48},{"ruleId":"96","replacedBy":"112"},{"ruleId":"98","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":9,"column":10,"nodeType":"116","endLine":9,"endColumn":30},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.",["117"],["118"],"'Loader' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["117"],["118"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]